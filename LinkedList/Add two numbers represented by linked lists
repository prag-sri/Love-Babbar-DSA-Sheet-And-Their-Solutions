********************************************************************************************************************************************************************
                                                               Add two numbers represented by linked lists
********************************************************************************************************************************************************************

GFG Link:- https://practice.geeksforgeeks.org/problems/add-two-numbers-represented-by-linked-lists/1


Given two decimal numbers represented by two linked lists of size N and M respectively. The task is to return a linked list that represents the sum of these two numbers.

For example, the number 190 will be represented by the linked list, 1->9->0->null, similarly 25 by 2->5->null. Sum of these two numbers is 190 + 25 = 215, which will be represented by 2->1->5->null. You are required to return the head of the linked list 2->1->5->null.

Example 1:

Input:
N = 2
valueN[] = {4,5}
M = 3
valueM[] = {3,4,5}
Output: 3 9 0  
Explanation: For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).
Example 2:

Input:
N = 2
valueN[] = {6,3}
M = 1
valueM[] = {7}
Output: 7 0
Explanation: For the given two linked
list (6 3) and (7), after adding the
two linked list resultant linked list
will be (7 0).
Your Task:
The task is to complete the function addTwoLists() which has node reference of both the linked lists and returns the head of the sum list.   

Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(Max(N,M)) for the resultant list.

Constraints:
1 <= N, M <= 5000



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

/* node for linked list

class Node {
    int data;
    Node next;

    Node(int d) {
        data = d;
        next = null;
    }
}

*/

class Solution{
    //Function to add two numbers represented by linked list.
    static Node addTwoLists(Node first, Node second){
        first= reverse(first);
        second= reverse(second);
        
        Node tmp1= first;
        Node tmp2= second;
        int carry=0;
        Node ansHead= null;
        Node ansTail= null;
        while(tmp1!=null && tmp2!=null)
        {
            int sum= tmp1.data+tmp2.data+carry;
            if(sum>9)
            {
                sum= sum%10;
                carry= 1;
            }
            else
                carry= 0;
            Node newNode= new Node(sum);
            if(ansHead==null && ansTail==null)
            {
                ansHead= newNode;
                ansTail= newNode;
            }
            else
            {
                ansTail.next= newNode;
                ansTail= newNode;
            }
            tmp1= tmp1.next;
            tmp2= tmp2.next;
        }
        while(tmp1!=null)
        {
            int sum= tmp1.data+carry;
            if(sum>9)
            {
                sum= sum%10;
                carry= 1;
            }
            else
                carry= 0;
            Node newNode= new Node(sum);
            ansTail.next= newNode;
            ansTail= newNode;
            tmp1= tmp1.next;
        }
        while(tmp2!=null)
        {
            int sum= tmp2.data+carry;
            if(sum>9)
            {
                sum= sum%10;
                carry= 1;
            }
            else
                carry= 0;
            Node newNode= new Node(sum);
            ansTail.next= newNode;
            ansTail= newNode;
            tmp2= tmp2.next;
        }
        if(carry==1)
        {
            Node newNode= new Node(1);
            ansTail.next= newNode;
            ansTail= newNode;
        }
        return reverse(ansHead);
    }
    static Node reverse(Node head){
        Node prev= null;
        Node curr= head;
        while(curr!=null)
        {
            Node nxt= curr.next;
            curr.next= prev;
            prev= curr;
            curr= nxt;
        }
        return prev;
    }
}
