********************************************************************************************************************************************************************
                                                               Find the Duplicate Number
********************************************************************************************************************************************************************


LeetCode Link:- https://leetcode.com/problems/find-the-duplicate-number/


Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
 

Follow up:

How can we prove that at least one duplicate number must exist in nums?
Can you solve the problem in linear runtime complexity?



********************************************************************************************************************************************************************
                                                                               CODE
********************************************************************************************************************************************************************

class Solution {
    public int findDuplicate(int[] nums) {
        //STEPS FOR SOLUTION:-
        //1)Traverse into the array nums and for every positive element i.e nums[i], make (nums[i]-1)th index element as negative
        //2)If the no. is already found to be negative then return nums[i] as nums[i] is the repeating no.

        int n= nums.length;
        for(int i=0; i<n; i++)
        {
            int index= Math.abs(nums[i])-1;
            if(nums[index]<0)
                return Math.abs(nums[i]);
            nums[index]=-1*nums[index];
        }
        return 0;
    }
}
